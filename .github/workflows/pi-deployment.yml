name: Raspberry Pi 4 Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_pi:
        description: 'Deploy to Raspberry Pi'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/xbox360-emulator

jobs:
  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        sudo apt-get update
        sudo apt-get install -y libusb-1.0-0-dev libudev-dev
    
    - name: Run comprehensive tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --junit-xml=test-results.xml \
          --html=test-report.html \
          --self-contained-html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          test-report.html
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.deploy_to_pi == 'true'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push main image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64,linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push updater image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.updater
        platforms: linux/arm64,linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-updater:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' || github.event.inputs.deploy_to_pi == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  create-deployment-package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment-package
        
        # Copy essential files
        cp docker-compose.yml deployment-package/
        cp install_automated_testing.sh deployment-package/
        cp -r tests deployment-package/
        
        # Create deployment script
        cat > deployment-package/deploy.sh << 'EOF'
        #!/bin/bash
        # Automated deployment script for Raspberry Pi 4
        
        set -e
        
        echo "=== Xbox 360 Emulation Deployment ==="
        
        # Check if running on Pi 4
        if ! grep -q "Raspberry Pi 4" /proc/cpuinfo; then
            echo "Error: This deployment is designed for Raspberry Pi 4"
            exit 1
        fi
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            echo "Please log out and back in to use Docker without sudo"
        fi
        
        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo pip3 install docker-compose
        fi
        
        # Pull latest images
        echo "Pulling latest images..."
        docker-compose pull
        
        # Start services
        echo "Starting services..."
        docker-compose up -d
        
        # Wait for services to start
        sleep 30
        
        # Check service health
        if docker-compose ps | grep -q "Up"; then
            echo "✓ Services started successfully"
            echo "Dashboard: http://$(hostname -I | awk '{print $1}'):8080"
            echo "Updater webhook: http://$(hostname -I | awk '{print $1}'):9000/webhook"
        else
            echo "✗ Service startup failed"
            docker-compose logs
            exit 1
        fi
        EOF
        
        chmod +x deployment-package/deploy.sh
        
        # Create environment template
        cat > deployment-package/.env.template << 'EOF'
        # GitHub Configuration
        GITHUB_REPO=your-username/your-repo-name
        GITHUB_TOKEN=your_github_token_here
        GITHUB_WEBHOOK_SECRET=your_webhook_secret_here
        
        # Update Configuration
        AUTO_UPDATE_ENABLED=true
        UPDATE_CHECK_INTERVAL=3600
        UPDATE_BRANCH=main
        
        # Container Configuration
        START_TESTING_DAEMON=true
        LOG_LEVEL=INFO
        EOF
        
        # Create README
        cat > deployment-package/README.md << 'EOF'
        # Xbox 360 Emulation - Raspberry Pi 4 Deployment
        
        ## Quick Start
        
        1. Copy this deployment package to your Raspberry Pi 4
        2. Copy `.env.template` to `.env` and fill in your GitHub details
        3. Run `./deploy.sh`
        
        ## Services
        
        - **Main Application**: Xbox 360 emulation with automated testing
        - **GitHub Updater**: Automatic updates from GitHub webhooks
        - **Log Analyzer**: Automated log analysis and error detection
        - **Web Dashboard**: Status monitoring at http://PI_IP:8080
        
        ## GitHub Setup
        
        1. Go to your GitHub repository settings
        2. Add a webhook pointing to `http://PI_IP:9000/webhook`
        3. Set content type to `application/json`
        4. Add your webhook secret to `.env`
        5. Generate a personal access token and add to `.env`
        
        ## Monitoring
        
        - View logs: `docker-compose logs -f`
        - Check status: `docker-compose ps`
        - Restart services: `docker-compose restart`
        - Update manually: `curl -X POST http://PI_IP:9000/manual-update`
        
        ## Automatic Features
        
        - ✅ Automatic code updates from GitHub
        - ✅ Continuous testing and health monitoring
        - ✅ Automatic error recovery
        - ✅ Performance monitoring and alerting
        - ✅ Log analysis and pattern detection
        - ✅ Backup and rollback capabilities
        EOF
        
        # Create archive
        tar -czf deployment-package.tar.gz deployment-package/
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz

  notify-pi-deployment:
    name: Notify Pi for Deployment
    runs-on: ubuntu-latest
    needs: [create-deployment-package]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Send deployment webhook
      run: |
        # If you have a webhook endpoint on your Pi, notify it
        if [ ! -z "${{ secrets.PI_WEBHOOK_URL }}" ]; then
          curl -X POST "${{ secrets.PI_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: deployment" \
            -d '{
              "deployment": {
                "sha": "${{ github.sha }}",
                "ref": "${{ github.ref }}",
                "environment": "raspberry-pi-4",
                "download_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }
            }'
        fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate release notes
      run: |
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ ! -z "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > release-notes.md
          git log --oneline --no-merges $LAST_TAG..HEAD >> release-notes.md
        else
          echo "## Initial Release" > release-notes.md
          git log --oneline --no-merges >> release-notes.md
        fi
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: release-notes.md
        draft: false
        prerelease: false

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements-test.txt
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/ -m "slow" \
          --benchmark-only \
          --benchmark-json=benchmark.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: false
        comment-on-alert: true